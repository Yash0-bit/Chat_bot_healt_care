# -*- coding: utf-8 -*-
"""healthcare_bot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11OSOtH3IJ4-1A43VZSVASAaB2ffrcfsC
"""

!pip install pyttsx3
!pip install fuzzywuzzy
!pip install gradio

!pip install fuzzywuzzy
import pandas as pd
from fuzzywuzzy import process
from sklearn.tree import DecisionTreeClassifier
import numpy as np
import gradio as gr
import joblib



# Load the training data
training = pd.read_csv('Training.csv')
cols = training.columns[:-1]
x = training[cols]
y = training['prognosis']

# Label encode the target variable
from sklearn import preprocessing
le = preprocessing.LabelEncoder()
le.fit(y)
y = le.transform(y)

# Train the decision tree classifier
clf = DecisionTreeClassifier()
clf.fit(x, y)

# Load symptom data and descriptions
symptom_description = pd.read_csv('symptom_Description.csv', index_col=0)
symptom_precautions = pd.read_csv('symptom_precaution.csv', index_col=0)

def fuzzy_match_symptom(input_symptom):
    # Use fuzzy matching to find the closest matching symptom
    choices = cols
    best_match, score = process.extractOne(input_symptom, choices)
    if score >= 80:  # You can adjust the matching threshold as needed
        return best_match
    else:
        return None

def chatbot():
    print("HealthCare ChatBot")
    name = input("Your Name? -> ")
    print("Hello,", name)

    while True:
        disease_input = input("Enter the symptom you are experiencing -> ").strip().lower()
        matched_symptom = fuzzy_match_symptom(disease_input)

        if matched_symptom:
            num_days = int(input("From how many days are you experiencing this? : "))

            input_vector = np.zeros(len(cols))
            input_vector[cols.get_loc(matched_symptom)] = 1
            prediction = clf.predict([input_vector])

            present_disease = le.inverse_transform(prediction)[0]
            print("You may have", present_disease)
            print(symptom_description.loc[present_disease])

            symptoms_given = list(symptom_precautions.columns[symptom_precautions.loc[present_disease].notna()])
            print("Are you experiencing any of these symptoms?")
            symptoms_exp = [symptom for symptom in symptoms_given if input(f"{symptom}? (yes/no): ").strip().lower() == 'yes']

            second_prediction = le.inverse_transform(clf.predict([input_vector]))[0]
            if present_disease != second_prediction:
                print("You may also have", second_prediction)
                print(symptom_description.loc[second_prediction])

            precautions = list(symptom_precautions.loc[present_disease].dropna())
            print("Take the following precautions:")
            for i, precaution in enumerate(precautions):
                print(f"{i + 1}) {precaution}")

        else:
            print("Enter a valid symptom.")

        another_symptom = input("Do you want to check another symptom? (yes/no): ").strip().lower()
        if another_symptom != 'yes':
            break

if __name__ == "__main__":
    chatbot()

# using gradio

import pandas as pd
import numpy as np
from fuzzywuzzy import process
from sklearn.tree import DecisionTreeClassifier
from sklearn import preprocessing
import joblib
import gradio as gr

# Load the training data
training = pd.read_csv('Training.csv')
cols = training.columns[:-1]
x = training[cols]
y = training['prognosis']

# Label encode the target variable
le = preprocessing.LabelEncoder()
le.fit(y)
y = le.transform(y)

# Train the decision tree classifier
clf = DecisionTreeClassifier()
clf.fit(x, y)

# Load symptom data and descriptions
symptom_description = pd.read_csv('symptom_Description.csv', index_col=0)
symptom_precautions = pd.read_csv('symptom_precaution.csv', index_col=0)

def fuzzy_match_symptom(input_symptom):
    # Use fuzzy matching to find the closest matching symptom
    choices = cols
    best_match, score = process.extractOne(input_symptom, choices)
    if score >= 80:  # You can adjust the matching threshold as needed
        return best_match
    else:
        return None

def chatbot(symptom, days):
    input_symptom = symptom.lower()
    matched_symptom = fuzzy_match_symptom(input_symptom)

    if matched_symptom:
        input_vector = np.zeros(len(cols))
        input_vector[cols.get_loc(matched_symptom)] = 1
        prediction = clf.predict([input_vector])
        present_disease = le.inverse_transform(prediction)[0]

        symptoms_given = list(symptom_precautions.columns[symptom_precautions.loc[present_disease].notna()])
        precautions = list(symptom_precautions.loc[present_disease].dropna())

        return f"You may have {present_disease}. Precautions: {', '.join(precautions)}"
    else:
        return "Enter a valid symptom."

iface = gr.Interface(
    fn=chatbot,
    inputs=["text", "number"],
    outputs="text",
    title="HealthCare ChatBot",
    description="Enter your symptom and number of days experiencing it.",
)

iface.launch()